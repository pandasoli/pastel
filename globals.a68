# -*- coding: utf-8 -*- #

PR include "types/task.a68" PR
PR include "types/group.a68" PR
PR include "quick sort.a68" PR
PR include "csv.a68" PR;

CHAR esc = REPR 27;

PROC get argv = (INT argi, STRING err msg) STRING: (
	IF argi > a68g argc THEN
		putf(stand error, ($g"[31m"gg"[m"ll$, esc, err msg, esc));
		stop
	FI;

	a68g argv(argi)
);

PROC get all tasks = (PROC (TASK) VOID callback) VOID: (
	FILE f;
	openf(f, "./tasks.csv", stand in channel);

	read csv(f, (FLEXCSVFIELDS fields) VOID:
		callback(csv to task(fields))
	);

	close(f)
);

PROC get today tasks = [] TASK: (
	FILE f;
	FLEX [0] TASK tasks;

	openf(f, "./tasks.csv", stand in channel);

	read csv(f, (FLEXCSVFIELDS fields) VOID: (
		TASK task = csv to task(fields);

		IF date OF task = today date THEN
			tasks +:= task
		FI
	));

	close(f);
	tasks
);

PROC get today notes = [] NOTE: (
	FILE f;
	FLEX [0] NOTE notes;

	openf(f, "./notes.csv", stand in channel);

	read csv(f, (FLEXCSVFIELDS fields) VOID: (
		NOTE note = csv to note(fields);

		IF date OF note = today date THEN
			notes +:= note
		FI
	));

	close(f);
	notes
);

PROC get today groups = [] GROUP: (
	FILE f;
	FLEX [0] GROUP groups;

	openf(f, "./groups.csv", stand in channel);

	read csv(f, (FLEXCSVFIELDS fields) VOID: (
		GROUP group = csv to group(fields);

		IF date OF group = today date THEN
			groups +:= group
		FI
	));

	close(f);
	groups
)
