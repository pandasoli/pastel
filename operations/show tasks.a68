# -*- coding: utf-8 -*- #

PR include "../printing/task.a68" PR
PR include "../printing/note.a68" PR
PR include "../globals.a68" PR
PR include "../utils.a68" PR
PR include "../quick sort.a68" PR;

PROC show tasks = VOID: (
	PROC print item = (ITEM item) VOID:
		CASE item IN
			(TASK v): print task(v),
			(NOTE v): print note(v)
		ESAC;

	PROC print group = (STRING title, [] ITEM items, [] GROUP groups) VOID: (
		FLEX [0] INT printed in group;
		BOOL found sep := FALSE;
		INT i := 1;

		IF UPB title > 0 THEN
			printf(($l"      ╭ "g"[1m"gg"[m"l$, esc, title, esc));
			printf($"      │"l$)
		ELSE
			printf($"      ╭"l$)
		FI;

		WHILE i <= UPB items DO
			ITEM item = items[i];
			INT id := get item id(item);
			BOOL has time := get item time(item) :/=: REF TIME(NIL);

			# Add separator after no-time items #
			IF has time AND NOT found sep AND i > 1 THEN
				found sep := TRUE;
				printf($"      │"l$);

				CASE items[i - 1] IN
					(NOTE note):
						printf($"      │"l$),

					(TASK task): (
						BOOL has reason = reason OF task :/=: REF STRING(NIL);
						STRING description = (state OF task = canceled AND has reason | reason OF task | description OF task);

						IF UPB description = 0 THEN
							printf($"      │"l$)
						FI
					)
				ESAC
			FI;

			# Print item/group #
			REF GROUP group := NIL;

			FOR i TO UPB groups DO
				IF includes(ids OF groups[i], id) THEN
					group := LOC GROUP := groups[i]
				FI
			OD;

			IF group :/=: REF GROUP(NIL) THEN
				[] ITEM these items = items[i:][:UPB ids OF group];
				i +:= UPB ids OF group - 1;

				print group(title OF group, these items, ~);
				printf($"      │"l$)
			ELSE
				print item(items[i])
			FI;

			i +:= 1
		OD;

		printf($"      ╰"ll$)
	);

	[] ITEM items = get today items;
	[] GROUP groups = get today groups;

	print group("", items, groups)
)
