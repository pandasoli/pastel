# -*- coding: utf-8 -*- #

PR include "../utils.a68" PR;

PROC edit = (REF INT argi) VOID: (
	# NOTE: Implement for week #
	INT index = TOINT get argv(argi +:= 1, "Expected index after 'edit'");
	STRING arg := get argv(argi +:= 1, "Expected new note content, new task title or task attribute");

	[] ITEM items = get today items;

	IF index > UPB items THEN
		putf(stand error, ($g"[31m"gg"[m"ll$, esc, "There're not many items in today's list", esc));
		stop
	FI;

	ITEM item = items[index];

	REF TIME start time := get item time(item);
	DATE date := get item date(item);

	#
		NOTE: When updating this procedure,
		only add attributes available for all items.
	#
	PROC process args = (PROC BOOL callback) VOID:
		WHILE argi <= a68g argc DO
			IF arg = "time" THEN
				arg := get argv(argi +:= 1, "Expected time after 'time'");
				start time := LOC TIME := str to time(arg)
			ELIF arg = "date" THEN
				arg := get argv(argi +:= 1, "Expected date after 'date'");
				date := str to date(arg)
			ELIF NOT callback THEN
				putf(stand error, ($g"[31mUnexpected '"g"' in here"g"[m"ll$, esc, arg, esc));
				stop
			FI;

			arg := a68g argv(argi +:= 1)
		OD;

	CASE item IN
		(TASK otask): (
			BOOL processed title := FALSE;
			TASK task := otask;

			process args(BOOL:
				IF   arg = "description" OR arg = "desc" THEN description OF task    := get argv(argi +:= 1, "Expected new description after '" + arg + "'"); TRUE
				ELIF arg = "finish"                      THEN finish OF time OF task := LOC TIME := str to time(get argv(argi +:= 1, "Expected new finish time after 'finish'")); TRUE
				ELIF arg = "repetition" OR arg = "rep"   THEN
					arg := get argv(argi +:= 1, "Expected new repetition after '" + arg + "'");

					[] STRING repetition list = ("today", "todaystack", "daily", "weekly", "monthly", "annually", "everyweekday");
					INT repetition = index of(repetition list, arg);

					IF repetition > 0 THEN
						repetition OF task := repetition;
						TRUE
					ELSE FALSE
					FI
				ELIF NOT processed title THEN
					title OF task := arg;
					processed title := TRUE
				ELSE FALSE
				FI
			);

			start OF time OF task := start time;
			date OF task := date;

			append file("./new.csv", task csv header);

			get all tasks((TASK t) VOID:
				append file("./new.csv", task to csv((id OF t = id OF task | task | t )))
			);

			move file("./new.csv", tasks data path)
		),

		(NOTE onote): (
			BOOL processed content := FALSE;
			NOTE note := onote;

			process args(BOOL:
				IF NOT processed content THEN
					content OF note := arg;
					processed content := TRUE
				ELSE FALSE
				FI
			);

			time OF note := start time;
			date OF note := date;

			append file("./new.csv", note csv header);

			get all notes((NOTE n) VOID:
				append file("./new.csv", note to csv((id OF n = id OF note | note | n )))
			);

			move file("./new.csv", notes data path)
		)
	ESAC
)
