# -*- coding: utf-8 -*- #

PROC process task add = (REF STRING arg, REF INT argi, INT id) TASK: (
	TASK task := (
		# id # id,
		# title # "",
		# description # "",
		# reason # NIL,
		# state # pending,
		# date # today date,
		# time # (NIL, NIL),
		# repeatition # today stack
	);

	# NOTE: Check ../add.a68 to see why `get argv` is not used here #
	title OF task := arg;

	WHILE argi < a68g argc DO
		arg := a68g argv(argi +:= 1);

		IF arg = "description" OR arg = "desc" THEN
			arg := get argv(argi +:= 1, "Expected description after '" + arg + "'");
			description OF task := arg
		ELIF arg = "repetition" OR arg = "rep"   THEN
			arg := get argv(argi +:= 1, "Expected repetition after '" + arg + "'");

			[] STRING repetition list = ("today", "todaystack", "daily", "weekly", "monthly", "annually", "everyweekday");
			INT repetition = index of(repetition list, arg);

			IF repetition > 0 THEN
				repetition OF task := repetition
			ELSE
				putf(stand error, ($g"[31m'"g"' is not a known repetition"g"[m"ll$, esc, arg, esc));
				stop
			FI
		ELIF arg = "date" THEN
			arg := get argv(argi +:= 1, "Expected date after 'date'");
			date OF task := str to date(arg)
		ELIF arg = "at" THEN
			arg := get argv(argi +:= 1, "Expected time after 'at'");
			start OF time OF task := LOC TIME := str to time(arg)
		ELIF arg = "to" THEN
			arg := get argv(argi +:= 1, "Expected time after 'to'");
			finish OF time OF task := LOC TIME := str to time(arg)
		ELSE
			putf(stand error, ($g"[31mUnexpected '"g"'"g"[m"ll$, esc, arg, esc));
			stop
		FI
	OD;

	task
)
